apiVersion: v1
kind: Secret
metadata:
  name: api-secrets
type: Opaque
data:
  db_root_password: cGFsb3NhZWFsb2xh
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: psql-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: psql-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
    spec:
      containers:
      - name: postgres
        image: postgres
        imagePullPolicy: "IfNotPresent"
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: db_root_password
        ports:
        - containerPort: 5432
          name: db-container
        volumeMounts:
          - name: postgres-persistent-storage
            mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-persistent-storage
          persistentVolumeClaim:
            claimName: psql-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: database
spec:
  ports:
  - port: 5432
    protocol: TCP
    name: postgres
  selector:
    app: database
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flaskapi-deployment
  labels:
    app: flaskapi
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flaskapi
  template:
    metadata:
      labels:
        app: flaskapi
    spec:
      containers:
        - name: api
          image: nutaro/flask_api:latest
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5000
          readinessProbe:
            initialDelaySeconds: 5
            timeoutSeconds: 1
            httpGet:
              path: /
              port: 5000
          livenessProbe:
            initialDelaySeconds: 5
            timeoutSeconds: 1
            httpGet:
              path: /
              port: 5000
          env:
            - name: db_password
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: db_root_password
            - name: db_name
              value: postgres
            - name: db_user
              value: postgres
            - name: db_drive
              value: postgresql+pg8000

---
apiVersion: v1
kind: Service
metadata:
  name: flask-service
spec:
  ports:
  - port: 5000
    protocol: TCP
    targetPort: 5000
  selector:
    app: flaskapi
  type: LoadBalancer